/* ########################

Name: Marin Pavlinov Marinov
file: main.cpp
purpose: shows all the calculations as well as the formulas to the user

SPECIAL THANKS TO Ihor Kalnytskyi
termcolor project

######################## */

#include "basics.hpp"
#include "cInterval.hpp"
#include "correlation.hpp"
#include "hypTest.hpp"
#include "termcolor.hpp" // courtesy of Ihor Kalnytskyi's project
// #include <doctest/doctest.h>
#include <algorithm>
#include <fstream>
#include <future>
#include <iomanip>
#include <iostream>
#include <thread>
#include <vector>

// Testing Multithreading vs SingleThreading
using namespace std::chrono;

int main() {
	std::vector<double> small = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

	std::vector<double> dataset =
	    {1,     2,     3,     4,     5,     5,     6,     6,     7,     7,     4.3,   7.52,  8.8,
	     9,     2,     2,     4,     5,     6,     2,     4,     55,    6,     2,     128,   199,
	     300,   320,   999,   123,   4,     5,     6,     7,     8,     5,     4,     2,     11,
	     3,     0.1,   55,    27,    55,    3,     4,     5,     6,     4,     1,     2,     3,
	     4,     5,     6,     7,     7,     8,     9,     10,    1,     2,     3,     4,     5,
	     6,     7,     9,     10,    111,   222,   333,   345,   1,     2,     3,     4,     5,
	     6,     7,     8,     9,     10,    15,    13,    14,    16,    17,    18,    19,    20,
	     21,    22,    23,    24,    25,    26,    28,    29,    50,    51,    33,    45,    66,
	     57,    11112, 2222,  345,   38,    999,   10000, 1001,  1002,  1003,  21.23, 44.44, 33,
	     33,    11.11, 21,    34,    88,    1,     2,     3,     4,     5,     5,     6,     6,
	     7,     7,     4.3,   7.52,  8.8,   9,     2,     2,     4,     5,     6,     2,     4,
	     55,    6,     2,     128,   199,   300,   320,   999,   123,   4,     5,     6,     7,
	     8,     5,     4,     2,     11,    3,     0.1,   55,    27,    55,    3,     4,     5,
	     6,     4,     1,     2,     3,     4,     5,     6,     7,     7,     8,     9,     10,
	     1,     2,     3,     4,     5,     6,     7,     9,     10,    111,   222,   333,   345,
	     1,     2,     3,     4,     5,     6,     7,     8,     9,     10,    15,    13,    14,
	     16,    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,    28,    29,
	     50,    51,    33,    45,    66,    57,    11112, 2222,  345,   38,    999,   10000, 1001,
	     1002,  1003,  21.23, 44.44, 33,    33,    11.11, 21,    34,    88,    1,     2,     3,
	     4,     5,     5,     6,     6,     7,     7,     4.3,   7.52,  8.8,   9,     2,     2,
	     4,     5,     6,     2,     4,     55,    6,     2,     128,   199,   300,   320,   999,
	     123,   4,     5,     6,     7,     8,     5,     4,     2,     11,    3,     0.1,   55,
	     27,    55,    3,     4,     5,     6,     4,     1,     2,     3,     4,     5,     6,
	     7,     7,     8,     9,     10,    1,     2,     3,     4,     5,     6,     7,     9,
	     10,    111,   222,   333,   345,   1,     2,     3,     4,     5,     6,     7,     8,
	     9,     10,    15,    13,    14,    16,    17,    18,    19,    20,    21,    22,    23,
	     24,    25,    26,    28,    29,    50,    51,    33,    45,    66,    57,    11112, 2222,
	     345,   38,    999,   10000, 1001,  1002,  1003,  21.23, 44.44, 33,    33,    11.11, 21,
	     34,    88,    1,     2,     3,     4,     5,     5,     6,     6,     7,     7,     4.3,
	     7.52,  8.8,   9,     2,     2,     4,     5,     6,     2,     4,     55,    6,     2,
	     128,   199,   300,   320,   999,   123,   4,     5,     6,     7,     8,     5,     4,
	     2,     11,    3,     0.1,   55,    27,    55,    3,     4,     5,     6,     4,     1,
	     2,     3,     4,     5,     6,     7,     7,     8,     9,     10,    1,     2,     3,
	     4,     5,     6,     7,     9,     10,    111,   222,   333,   345,   1,     2,     3,
	     4,     5,     6,     7,     8,     9,     10,    15,    13,    14,    16,    17,    18,
	     19,    20,    21,    22,    23,    24,    25,    26,    28,    29,    50,    51,    33,
	     45,    66,    57,    11112, 2222,  345,   38,    999,   10000, 1001,  1002,  1003,  21.23,
	     44.44, 33,    33,    11.11, 21,    34,    88,    1,     2,     3,     4,     5,     5,
	     6,     6,     7,     7,     4.3,   7.52,  8.8,   9,     2,     2,     4,     5,     6,
	     2,     4,     55,    6,     2,     128,   199,   300,   320,   999,   123,   4,     5,
	     6,     7,     8,     5,     4,     2,     11,    3,     0.1,   55,    27,    55,    3,
	     4,     5,     6,     4,     1,     2,     3,     4,     5,     6,     7,     7,     8,
	     9,     10,    1,     2,     3,     4,     5,     6,     7,     9,     10,    111,   222,
	     333,   345,   1,     2,     3,     4,     5,     6,     7,     8,     9,     10,    15,
	     13,    14,    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
	     28,    29,    50,    51,    33,    45,    66,    57,    11112, 2222,  345,   38,    999,
	     10000, 1001,  1002,  1003,  21.23, 44.44, 33,    33,    11.11, 21,    34,    88,    1,
	     2,     3,     4,     5,     5,     6,     6,     7,     7,     4.3,   7.52,  8.8,   9,
	     2,     2,     4,     5,     6,     2,     4,     55,    6,     2,     128,   199,   300,
	     320,   999,   123,   4,     5,     6,     7,     8,     5,     4,     2,     11,    3,
	     0.1,   55,    27,    55,    3,     4,     5,     6,     4,     1,     2,     3,     4,
	     5,     6,     7,     7,     8,     9,     10,    1,     2,     3,     4,     5,     6,
	     7,     9,     10,    111,   222,   333,   345,   1,     2,     3,     4,     5,     6,
	     7,     8,     9,     10,    15,    13,    14,    16,    17,    18,    19,    20,    21,
	     22,    23,    24,    25,    26,    28,    29,    50,    51,    33,    45,    66,    57,
	     11112, 2222,  345,   38,    999,   10000, 1001,  1002,  1003,  21.23, 44.44, 33,    33,
	     11.11, 21,    34,    88,    1,     2,     3,     4,     5,     5,     6,     6,     7,
	     7,     4.3,   7.52,  8.8,   9,     2,     2,     4,     5,     6,     2,     4,     55,
	     6,     2,     128,   199,   300,   320,   999,   123,   4,     5,     6,     7,     8,
	     5,     4,     2,     11,    3,     0.1,   55,    27,    55,    3,     4,     5,     6,
	     4,     1,     2,     3,     4,     5,     6,     7,     7,     8,     9,     10,    1,
	     2,     3,     4,     5,     6,     7,     9,     10,    111,   222,   333,   345,   1,
	     2,     3,     4,     5,     6,     7,     8,     9,     10,    15,    13,    14,    16,
	     17,    18,    19,    20,    21,    22,    23,    24,    25,    26,    28,    29,    50,
	     51,    33,    45,    66,    57,    11112, 2222,  345,   38,    999,   10000, 1001,  1002,
	     1003,  21.23, 44.44, 33,    33,    11.11, 21,    34,    88,    1,     2,     3,     4,
	     5,     5,     6,     6,     7,     7,     4.3,   7.52,  8.8,   9,     2,     2,     4,
	     5,     6,     2,     4,     55,    6,     2,     128,   199,   300,   320,   999,   123,
	     4,     5,     6,     7,     8,     5,     4,     2,     11,    3,     0.1,   55,    27,
	     55,    3,     4,     5,     6,     4,     1,     2,     3,     4,     5,     6,     7,
	     7,     8,     9,     10,    1,     2,     3,     4,     5,     6,     7,     9,     10,
	     111,   222,   333,   345,   1,     2,     3,     4,     5,     6,     7,     8,     9,
	     10,    15,    13,    14,    16,    17,    18,    19,    20,    21,    22,    23,    24,
	     25,    26,    28,    29,    50,    51,    33,    45,    66,    57,    11112, 2222,  345,
	     38,    999,   10000, 1001,  1002,  1003,  21.23, 44.44, 33,    33,    11.11, 21,    34,
	     88,    1,     2,     3,     4,     5,     5,     6,     6,     7,     7,     4.3,   7.52,
	     8.8,   9,     2,     2,     4,     5,     6,     2,     4,     55,    6,     2,     128,
	     199,   300,   320,   999,   123,   4,     5,     6,     7,     8,     5,     4,     2,
	     11,    3,     0.1,   55,    27,    55,    3,     4,     5,     6,     4,     1,     2,
	     3,     4,     5,     6,     7,     7,     8,     9,     10,    1,     2,     3,     4,
	     5,     6,     7,     9,     10,    111,   222,   333,   345,   1,     2,     3,     4,
	     5,     6,     7,     8,     9,     10,    15,    13,    14,    16,    17,    18,    19,
	     20,    21,    22,    23,    24,    25,    26,    28,    29,    50,    51,    33,    45,
	     66,    57,    11112, 2222,  345,   38,    999,   10000, 1001,  1002,  1003,  21.23, 44.44,
	     33,    33,    11.11, 21,    34,    88,    1,     2,     3,     4,     5,     5,     6,
	     6,     7,     7,     4.3,   7.52,  8.8,   9,     2,     2,     4,     5,     6,     2,
	     4,     55,    6,     2,     128,   199,   300,   320,   999,   123,   4,     5,     6,
	     7,     8,     5,     4,     2,     11,    3,     0.1,   55,    27,    55,    3,     4,
	     5,     6,     4,     1,     2,     3,     4,     5,     6,     7,     7,     8,     9,
	     10,    1,     2,     3,     4,     5,     6,     7,     9,     10,    111,   222,   333,
	     345,   1,     2,     3,     4,     5,     6,     7,     8,     9,     10,    15,    13,
	     14,    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,    28,
	     29,    50,    51,    33,    45,    66,    57,    11112, 2222,  345,   38,    999,   10000,
	     1001,  1002,  1003,  21.23, 44.44, 33,    33,    11.11, 21,    34,    88,    1,     2,
	     3,     4,     5,     5,     6,     6,     7,     7,     4.3,   7.52,  8.8,   9,     2,
	     2,     4,     5,     6,     2,     4,     55,    6,     2,     128,   199,   300,   320,
	     999,   123,   4,     5,     6,     7,     8,     5,     4,     2,     11,    3,     0.1,
	     55,    27,    55,    3,     4,     5,     6,     4,     1,     2,     3,     4,     5,
	     6,     7,     7,     8,     9,     10,    1,     2,     3,     4,     5,     6,     7,
	     9,     10,    111,   222,   333,   345,   1,     2,     3,     4,     5,     6,     7,
	     8,     9,     10,    15,    13,    14,    16,    17,    18,    19,    20,    21,    22,
	     23,    24,    25,    26,    28,    29,    50,    51,    33,    45,    66,    57,    11112,
	     2222,  345,   38,    999,   10000, 1001,  1002,  1003,  21.23, 44.44, 33,    33,    11.11,
	     21,    34,    88,    1,     2,     3,     4,     5,     5,     6,     6,     7,     7,
	     4.3,   7.52,  8.8,   9,     2,     2,     4,     5,     6,     2,     4,     55,    6,
	     2,     128,   199,   300,   320,   999,   123,   4,     5,     6,     7,     8,     5,
	     4,     2,     11,    3,     0.1,   55,    27,    55,    3,     4,     5,     6,     4,
	     1,     2,     3,     4,     5,     6,     7,     7,     8,     9,     10,    1,     2,
	     3,     4,     5,     6,     7,     9,     10,    111,   222,   333,   345,   1,     2,
	     3,     4,     5,     6,     7,     8,     9,     10,    15,    13,    14,    16,    17,
	     18,    19,    20,    21,    22,    23,    24,    25,    26,    28,    29,    50,    51,
	     33,    45,    66,    57,    11112, 2222,  345,   38,    999,   10000, 1001,  1002,  1003,
	     21.23, 44.44, 33,    33,    11.11, 21,    34,    88};

	std::sort(dataset.begin(), dataset.end());

	// Multithreaded
	system_clock::time_point start = system_clock::now();

	std::thread meanz(&calculateMean, std::ref(dataset));

	std::thread rangez(&calculateRange, std::ref(dataset));

	std::thread sdz(&calculateStandardDeviation, std::ref(dataset));

	std::thread percentilesz(&calculatePercentiles, std::ref(dataset));

	meanz.join();
	rangez.join();
	sdz.join();
	percentilesz.join();

	system_clock::time_point end = system_clock::now();

	auto diff = duration_cast<std::chrono::microseconds>(end - start).count();

	std::cout << "Total Time Taken for MultiThreaded (std::thread) = " << diff << " Mircroseconds"
	          << '\n';
	// async
	start = system_clock::now();

	std::future<double> mean = std::async(std::launch::async, calculateMean, dataset);
	std::future<double> range = std::async(std::launch::async, calculateRange, dataset);
	std::future<Percentile> percentiles =
	    std::async(std::launch::async, calculatePercentiles, dataset);

	std::future<DataType> sd = std::async(std::launch::async, calculateStandardDeviation, dataset);

	mean.get();
	range.get();
	percentiles.get();
	sd.get();

	end = system_clock::now();

	diff = duration_cast<std::chrono::microseconds>(end - start).count();

	std::cout << "Total Time Taken for MultiThreaded (async and future) = " << diff
	          << " Mircroseconds" << '\n';

	// Single-Threaded

	start = system_clock::now();

	calculateMean(dataset);

	calculateRange(dataset);

	// calculateMode(dataset);

	calculatePercentiles(dataset);

	calculateStandardDeviation(dataset);

	end = system_clock::now();

	diff = duration_cast<std::chrono::microseconds>(end - start).count();

	std::cout << "Total Time Taken for SingleThreaded = " << diff << " Microseconds" << '\n';
}
